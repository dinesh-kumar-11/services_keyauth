<?php

/**
 * @file
 *
 * This module provides key authnetication for services module
 * @author dinesh.sarangapani
 */


define('DOMAINS_VOCAB', 'domains');

/**
 * Implementation of hook_menu().
 */
function services_keyauth_menu() {
  $items = array();

  $items['admin/connect/services/keys'] = array(
    'title'             => 'Keys',
    'description'       => 'Manage application access to site services.',
    'page callback'     => 'services_keyauth_admin_keys_list',
    'access arguments'  => array('access key authentication'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'services_keyauth.admin.inc',
  );
  $items['admin/connect/services/keys/%'] = array(
    'title'             => 'Edit key',
    'access arguments'  => array('access key authentication'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_keyauth_admin_keys_form'),
    'file'              => 'services_keyauth.admin.inc',
    'type'              => MENU_CALLBACK,
  );
  $items['admin/connect/services/keys/%/delete'] = array(
    'access arguments'  => array('administer services'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_keyauth_admin_keys_delete_confirm', 4),
    'file'              => 'services_keyauth.admin.inc',
    'type'              => MENU_CALLBACK,
  );
  $items['admin/connect/services/keys/list'] = array(
    'title'             => 'List',
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'access arguments'  => array('access key authentication'),
    'weight'            => -10,
  );
  $items['admin/connect/services/keys/add'] = array(
    'title'             => 'Create key',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_keyauth_admin_keys_form'),
    'access arguments'  => array('access key authentication'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'services_keyauth.admin.inc',
  );
  $items['admin/connect/services/keys/list/domains/%'] = array(
    'title'             => 'List Key details',
    'page callback'     => 'services_key_admin_keys_list',
    'page arguments'    => array(6),
    'access arguments'  => array('access key authentication'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'services_keyauth.admin.inc',
  );

  return $items;
}

/**
 * Implemantation of Hook_help
 *
 * @param string $path
 * @param string $arg
 * @return String of help text
 */
function services_keyauth_help($path, $arg) {
  $output = NULL;

  switch ($path) {
    case 'admin/connect/services/keys':
      $output = '<p>' . t('Key Authnetication for Services module. Generate keys here per domain') . '</p>';
      $output .= '<p>' . t('Have the keys stored in the respective services created. The keys can be re-used for "n" number of services.Keys are domain sensitive.') . '</p>';
      break;
    case 'admin/connect/services/keys/add':
      $output = '<p>' . t('Generate keys here per domain. Remember keys are domain sensitive') . '</p>';
      break;
  }

  return $output;
}


/**
 * Implementation of hook_permission
 *
 * @return array of permission
 */
function services_keyauth_permission() {
  return array(
    'access key authentication' => array(
      'title' => t('Access key authentication'),
      'description' => t('Give user the access to add, edit, delete keys'),
    ),
  );
}


/**
 * Implementation of hook_services_authentication().
 *
 * Supplies information about a given authentication method to Services.
 *
 * @return
 *   An associative array with information about the authentication method
 *   and its callbacks. The possible keys are as follows (all keys are
 *   optional unless noted).
 *
 *   - title (required): The display name for this authentication method.
 *   - description (required): Longer text describing this authentciation
 *     method.
 *   - authenticate_call (required): The name of a function to be called
 *     to perform the actual authentication. <details of params/return>
 *   - security_settings: A callback function which returns an associative
 *     array of Form API elements for a settings form.
 *   - _services_oauth_security_settings_validate: The name of a standard form
 *     validation callback for the form defined in 'security_settings'.
 *   - _services_oauth_security_settings_submit: The name of a standard form
 *     submit callback for the form defined in 'security_settings'.
 *   - alter_methods: The name of a callback function which will alter a
 *     services method signature in order to add required arguments.
 *   - file: An include file which contains the authentication callbacks.
 */
function services_keyauth_services_authentication_info() {
  return array(
    'file'             => 'services_keyauth.inc',
    'title'            => t('Key Authentication'),
    'description'      => t('An Key authorization'),
    'security_settings' => '_services_keyauth_security_settings',
    'authenticate_call' => '_services_keyauth_authenticate_call',
    'controller_settings' => '_services_keyauth_controller_settings',
  );
}


/**
 * Return key inforamtion for all API keys.
 *
 * @return
 *   An associative array of objects with the key's title and domain,
 *   keyed on the Key ID.
 */
function services_keyauth_get_keys() {
  static $keys;
  if (!$keys) {
    $keys = array();
    $result = db_select('services_keys', 'sks')
      ->fields('sks')
      ->execute()
      ->fetchAll();
    foreach ($result as $key) {
      $keys[$key->kid]['title'] = $key->title;
      $keys[$key->kid]['service_key'] = $key->service_key;
    }
  }
  return $keys;
}

/**
 * Return key inforamtion for a given domain
 * @param $domain
 *   Domain name ex: www.drupal.org, with out any protocol
 * @return
 *   Key for the given domain
 *   if multiple key match any one will be returned
 */
function services_keyauth_get_key($domain) {
  if (!isset($domain)) {
    return FALSE;
  }
  $domain_tids = get_service_domain_tid($domain);

  // return FALSE if we do not have the domain in its vocabulary
  if (empty($domain_tids)) {
    return FALSE;
  }

  $kid_domain = get_kid_domain($domain_tids);

  if (empty($kid_domain)) {
    return FALSE;
  }

  $key = get_key_kid($kid_domain);

  if (!empty($key)) {
    return  $key;
  }
  return;
}


/**
 * To get the kid for the domains
 *
 * @param unknown_type $domain_tids
 */
function get_kid_domain($domain_tids) {
  if (empty($domain_tids)) {
    return FALSE;
  }

  $kid_domain = db_select('services_key_domain', 'skd')
    ->fields('skd', array('kid'))
    ->condition('domain_id', $domain_tids, 'IN')
    ->execute()
    ->fetchField();
  return $kid_domain;
}


/**
 * To get the kid for the domains
 *
 * @param unknown_type $domain_tids
 */
function check_kid_domain($domain_tids, $kid) {
  if (empty($domain_tids) || empty($kid)) {
    return FALSE;
  }
  $hash_key = hash('sha256', implode(';', $domain_tids) . $kid);
  $cached = cache_expiry_get('s_auth_check_kid_domain' . $hash_key);
  if ($cached && $cached->data) {
    return $cached->data;
  }
  $return = (bool) db_query("SELECT 1 FROM {services_key_domain} WHERE kid = :kid AND domain_id IN (:domain_id)",
  array(':kid' => $kid, ':domain_id' => $domain_tids))
    ->fetchField();
  cache_set('s_auth_check_kid_domain' . $hash_key,$return);
  return $return;
}


/**
 * To get the actual key from kid
 *
 * @param unknown_type $kid_domain
 */
function get_key_kid($kid_domain) {

  $kid_domain = db_select('services_keys', 'skd')
    ->fields('skd', array('service_key'))
    ->condition('kid', $kid_domain)
    ->execute()
    ->fetchField();

  return $kid_domain;
}

/**
 *
 * Function to get the domain tid of the domain
 * that is being sent
 *
 * @param string $domain
 *
 * @return array() if not found, else return array of tids
 */
function get_service_domain_tid($domain) {
  if (!isset($domain)) {
    return array();
  }
  $vocabulary_obj = taxonomy_vocabulary_machine_name_load(DOMAINS_VOCAB);


  $domain_term = taxonomy_term_load_multiple(array(), array('name' => trim($domain), 'vid' => array($vocabulary_obj->vid)));

  $return_val = array();
  if (!empty($domain_term)) {
    $return_val = array_keys($domain_term);
  }

  return $return_val;
}


/**
 * Autheticate the domain with the given key
 *
 *  @param $domain
 *    Domain name ex: www.drupal.org
 *  @param $key
 *    A unique value to authenticate the given domain
 *
 *  @return
 *    TRUE on successful authentication
 */
function services_authenticate_domain($domain, $key) {

  if (!isset($domain) || empty($key)) {
    return FALSE;
  }

  $hash_key = hash('sha256', $domain . $key);
  $cached = cache_expiry_get('s_auth_main_' . $hash_key);
  if ($cached && $cached->data) {
    return $cached->data;
  }

  $kid = db_query("SELECT kid FROM {services_keys} WHERE service_key = :kid", array(':kid' => $key))->fetchField();

  if (empty($kid)) {
    $return = FALSE;
  }

  $domain_tids = get_service_domain_tid($domain);

  // return FALSE if we do not have the domain in its vocabulary
  if (empty($domain_tids)) {
    $regEx_domain = implode('.', array_slice(explode('.', parse_url($domain, PHP_URL_HOST)), -2));
    if (!$regEx_domain || empty($regEx_domain)) {
      $parsed_url = parse_url($domain);
      if (isset($parsed_url['path']) && !empty($parsed_url['path'])) {
        $regEx_domain = implode('.', array_slice(explode('.', $parsed_url['path']), -2));
      }
    }
    $domain_tids = get_service_domain_tid($regEx_domain);
    if (empty($domain_tids)) {
      $return = FALSE;
    }
  }

  $kid_domain = check_kid_domain($domain_tids, $kid);

  if (empty($kid_domain)) {
    $validate_domain = subdomain_validation($domain, $kid);
    if (empty($validate_domain)) {
      $return = FALSE;
    }
    else {
      $return = TRUE;
    }
  }
  else {
    $return = TRUE;
  }
  
  if($return){
  cache_set('s_auth_main_' . $hash_key, $return);
  }
  
  return $return;
}

/**
 * Autheticate the domain with the given key
 *
 *  @param $domain
 *    Domain name ex: www.drupal.org
 *  @param $key
 *    A unique value to authenticate the given domain
 *
 *  @return
 *    TRUE on successful authentication
 */
function services_authenticate($key) {
  $cached = cache_expiry_get('services_authenticate_' . $key);
  if (!empty($cached->data)) {
    return $cached->data;
  }
  $return = (bool) db_query("SELECT 1 FROM {services_keys} WHERE kid = :kid", array(':kid' => $key))->fetchField();
  cache_set('service_authenticate_' . $key, $return);
  return $return;
}

/**
 * Given the necessary data, create a unique hash for key authentication.
 *
 * This has is compared to the has passed in by the client to verify
 * that the two match.
 *
 * @param $timestamp
 *   Current time in unix timestamp format.
 * @param $domain
 *   A unique value to identify this request. This typically matched the
 *   client's domain, but does not have to.
 * @param $nonce
 *   A random value.
 * @param $method
 *   The services method being called.
 * @param $args
 *   An array of argument for the method.
 *
 * @return
 *   A sha256 hash of the above data, plus the API key.
 *
 * @see _services_keyauth_authenticate_call()
 */
function services_get_hash($timestamp, $domain, $nonce, $api_key) {
  $hash_parameters = array($timestamp, $domain, $nonce);
  return hash_hmac("sha256", implode(';', $hash_parameters), $api_key);
}


/**
 * Implementation of hook_connect_cron().
 */
function services_keyauth_connect_cron() {
  // Clear old values from the nonce table.
  $expiry_time = REQUEST_TIME -  300;
  db_delete('services_timestamp_nonce')
    ->condition('timestamp', $expiry_time, '<')
    ->execute();
  watchdog('services_key', 'Deleted services timestamp nonce ', array(), WATCHDOG_NOTICE);

}

/**
 * Function to fetch the domain name from the URL
 * example http://www.google.com will return google.com
 *
 * @param $url
 *   URL
 *
 * @return
 *   Domain name of the URL, on fail returns FALSE
 */
function get_domain_name($url) {
  if (empty($url) && !is_string($url)) {
    FALSE;
  }
  $matches = array();
  preg_match('/[^\.\/]+\.[^\.\/]+$/', $url, $matches);
  return (!empty($matches[0])) ? $matches[0] : FALSE;
}



/**
 * Implmentation of taxonomy term delete
 *
 * to delete the tid reference from services domain table
 *
 * @param object $term
 */
function services_keyauth_taxonomy_term_delete($term) {
  if (!empty($term) && $term->vocabulary_machine_name == DOMAINS_VOCAB) {
    db_delete('services_key_domain')
      ->condition('domain_id', $term->tid)
      ->execute();
    cache_clear_service_auth();
  }
}


/**
 * Function to clear the services cache clear
 *
 */
function cache_clear_service_auth() {
  cache_clear_all('s_auth_', 'cache', TRUE);
}



/**
 * Return key inforamtion for all API keys.
 *
 * @return
 *   An associative array of objects with the key's title and domain,
 *   keyed on the Key ID.
 */
function services_keyauth_get_keys_mapping() {
  static $keys;
  if (!$keys) {
    $keys = array();
    $result = db_select('services_keys', 'sks')
      ->fields('sks')
      ->execute()
      ->fetchAll();
    foreach ($result as $key) {
      $keys[$key->service_key]['title'] = $key->title;
      $keys[$key->service_key]['service_key'] = $key->service_key;
    }
  }
  return $keys;
}
/*
 * Function to check for subdomains
 * @params
 *   domain : Domain name
 *   kid : The key id
 * @return
 *   Boolean True or False
 */
function subdomain_validation($domain, $kid) {

  if (!empty($domain)) {
    $regEx_domain = get_domain($domain);
    $domain_tids = get_service_domain_tid($regEx_domain);
    if (empty($domain_tids)) {
      $return = FALSE;
    }
  }
  $kid_domain = check_kid_domain($domain_tids, $kid);
  return $kid_domain;
}

/*
 * Function to return the host name if subdomain is given
 * @params
 *   url
 * @return
 *   res : hostname
 */
function get_domain($url)   {
  if ( !preg_match("/^http/", $url) )
    $url = 'http://' . $url;
  if ( $url[strlen($url)-1] != '/' )
    $url .= '/';
  $pieces = parse_url($url);
  $domain = isset($pieces['host']) ? $pieces['host'] : '';
  if ( preg_match('/(?P<domain>[a-z0-9][a-z0-9\-]{1,63}\.[a-z\.]{2,6})$/i', $domain, $regs) ) {
    $res = preg_replace('/^www\./', '', $regs['domain'] );
    return  $res;
  }
  return FALSE;
}

